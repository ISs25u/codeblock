{
    "type": "MOD",
    "title": "CodeBlock",
    "name": "codeblock",
    "short_description": "Use lua code to build anything you want",
    "long_description": "CodeBlock\n=========================\n\n![License](https://img.shields.io/badge/License-GPLv3-blue.svg)\n[![ContentDB](https://content.minetest.net/packages/giga-turbo/codeblock/shields/downloads/)](https://content.minetest.net/packages/giga-turbo/codeblock/)\n\n**CodeBlock allows to use `lua` code in Minetest to build anything you want**\n\n**License:** GPLv3   \n**Credits:** inspired by [Gnancraft](http://gnancraft.net/), [ComputerCraft](http://www.computercraft.info/), [Visual Bots](https://content.minetest.net/packages/Nigel/vbots/), [TurtleMiner](https://content.minetest.net/packages/BirgitLachner/turtleminer/), [basic_robot](https://github.com/ac-minetest/basic_robot)\n\n\n## Quick start\n\n### Run your first program\n\n1. Create an empty (flat) world, enable `codeblock` mod ant its dependencies\n2. Enable creative mode and start the game\n3. Right click with ![License](https://github.com/gigaturbo/codeblock/blob/master/textures/dp.ico) tool on a block, choose `example.lua` then left click with ![License](https://github.com/gigaturbo/codeblock/blob/master/textures/dp.ico) to start the drone\n\n### Write your first program\n\n1. Right click with ![License](https://github.com/gigaturbo/codeblock/blob/master/textures/ds.ico) tool to open the `lua` editor\n2. Create a new file with the `new file` field and write some code on the main window\n3. Click `load and exit` to load your code in the drone\n4. Right click with ![License](https://github.com/gigaturbo/codeblock/blob/master/textures/dp.ico) tool on a block and run the code with a left click on ![License](https://github.com/gigaturbo/codeblock/blob/master/textures/dp.ico)\n5. Read the [API](https://github.com/gigaturbo/codeblock#lua-api) below to know which commands and blocks you can use!\n\n### More examples\n\n1. Generate built-in examples by typing in chat `/codegenerate`\n2. Open the editor and choose an example to run\n3. Some examples require greater [permisisons](https://github.com/gigaturbo/codeblock#codelevel) to be run and running the program will return an error. In this case grant yourself the mod permission with `/grantme codeblock` and use `/codelevel 4` to grant you full power\n\n## Codelevel\n\nDrone capacities depends on the user's _codelevel_ which can be set with the `/codelevel` [command](https://github.com/gigaturbo/codeblock#chat-commands) (see below). High codelevels should be given carefully to users as program could overload the server and crash it. Default codelevel is `1`.\n\n| codelevel     | 1 (limited) | 2 (basic) | 3 (privileged) | 4 (trusted) |                                                                      |\n|---------------|-------------|-----------|----------------|-------------|----------------------------------------------------------------------|\n| max_calls     |         1e6 |       1e7 |            1e8 |         1e9 | max number of calls (function calls and loops)                       |\n| max_volume    |         1e5 |       1e6 |            1e7 |         1e8 | max build volume (1 block = 1mÂ³)                                     |\n| max_commands  |         1e4 |       1e5 |            1e6 |         1e7 | max drone commands (movements, constructions, checkpoints, etc)      |\n| max_distance  |         150 |       300 |            700 |        1500 | max drone distance from drone spawn-point                            |\n| max_dimension |          15 |        30 |             70 |         150 | max dimension of shapes (either width, length, height or radius) |\n\nCodelevel definitions can be modified by editing `lib/config.lua`.\n\n## Chat commands\n\n#### `/codelevel <playername> <1-4>`\n\nSet the codelevel of an user. Requires the `codeblock` privilege (`/grant <user> codeblock`).\n`<playername>` defautls to the user name if ommited.\n\n#### `/codegenerate`\n\nGenerates the example programs for the user issuing the command.\n\n## Lua api\n\n### Movements\n\nThe coordinate system used is *relative to the player*. When the drone is placed it is oriented in the player direction, going forwards. All movements on the `x`, `y` and `z` axis are always relative to the drone direction.\n\nThe parameter `n` denotes an integer describing how much to move in the specified direction axis. A negative value can be used to represent movement on the oposite direction, that is, `up(-1)` is equivalent ot `down(1)`. The default value of `n` is `1` and can be ommited (`forward()` is equivalent to `forward(1)`)\n\n#### Moving the drone\n\n```lua\nup(n) \ndown(n)\nforward(n)\nback(n)\nleft(n)\nright(n)\nmove(n_right, n_up, n_forward) -- each parameter defaults to zero\n```\n\nExample: `move(-5, 1, 3)`\n\n#### Rotating the drone\n\n```lua\nturn_right()\nturn_left()\nturn(n_quarters_anti_clockwise)\n```\n\nExample: `turn(2)`\n\n#### Checkpoints\n\nCheckpoints allow to save the current position of the drone to use it later. Checkpoints are remembered by their `name` which must be a string. A default checkpoint with name `spawn` is associated to the drone spawn position.\n\n```lua\nsave(name) -- creates a checkpoint\ngo(name, n_right, n_up, n_forward) -- go back to a checkpoint\n```\n\nExample:\n```lua\nsave('place1')\nsave('place2')\ngo() -- same as go('spawn', 0, 0, 0)\ngo('place1') -- same as go('place1', 0, 0, 0)\ngo('place2', 10, -50, 1) -- go to checkpoint with offsets\n\n```\n\n### Block types\n\nPlacing blocks and building shapes requires a `block` parameter, which can be obtained using the following tables.\n\n#### `blocks`\n\nString-indexed table with the following values:\n\n```lua\nair, stone, cobble, stonebrick, stone_block, mossycobble, desert_stone, desert_cobble, desert_stonebrick, desert_stone_block, sandstone, sandstonebrick, sandstone_block, desert_sandstone, desert_sandstone_brick, desert_sandstone_block, silver_sandstone, silver_sandstone_brick, silver_sandstone_block, obsidian, obsidianbrick, obsidian_block, dirt, dirt_with_grass, dirt_with_grass_footsteps, dirt_with_dry_grass, dirt_with_snow, dirt_with_rainforest_litter, dirt_with_coniferous_litter, dry_dirt, dry_dirt_with_dry_grass, permafrost, permafrost_with_stones, permafrost_with_moss, clay, snowblock, ice, cave_ice, tree, wood, leaves, jungletree, junglewood, jungleleaves, pine_tree, pine_wood, pine_needles, acacia_tree, acacia_wood, acacia_leaves, aspen_tree, aspen_wood, aspen_leaves, stone_with_coal, coalblock, stone_with_iron, steelblock, stone_with_copper, copperblock, stone_with_tin, tinblock, bronzeblock, stone_with_gold, goldblock, stone_with_mese, mese, stone_with_diamond, diamondblock, cactus, bush_leaves, acacia_bush_leaves, pine_bush_needles, bookshelf, glass, obsidian_glass, brick, meselamp\n```\n\nExample: `local b = blocks.glass`\n\n#### `plants`\n\nString-indexed table with the following values:\n\n```lua\nsapling, apple, junglesapling, emergent_jungle_sapling, pine_sapling, acacia_sapling, aspen_sapling, large_cactus_seedling, dry_shrub, grass_1, grass_2, grass_3, grass_4, grass_5, dry_grass_1, dry_grass_2, dry_grass_3, dry_grass_4, dry_grass_5, fern_1, fern_2, fern_3, marram_grass_1, marram_grass_2, marram_grass_3, bush_stem, bush_sapling, acacia_bush_stem, acacia_bush_sapling, pine_bush_stem, pine_bush_needles, pine_bush_sapling\n```\n\nExample: `local p = plants.pine_sapling`\n\n#### `wools`\n\nString-indexed table with the following values:\n\n```lua\nwhite, grey, dark_grey, black, violet, blue, cyan, dark_green, green, yellow, brown, orange, red, magenta, pink\n```\n\nExample: `local rw = wools.red`\n\n#### `iwools`\n\nInteger-indexed table, without white, black and greys, in pseudo-rainbow order (`red`, `brown`, `orange`, `yellow`, `green`, `dark_green`, `cyan`, `blue`, `violet`, `magenta`, `pink`), with the following values:\n\n```lua\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\n```\n\nExample: `local orange = iwools[3]`\n\n### Construction\n\n#### Placing one block\n\nFunctions to place individual blocks.\n\n```lua\nplace(block) -- place one block at drone position\nplace_relative(n_right, n_up, n_forward, block, checkpoint) -- place one block relative to a checkpoint\n```\n\nExample:\n```lua\nplace() -- equivalent to place(blocks.stone)\nplace(blocks.brick)\nsave('place2')\nplace_relative(1, 0, 0, wools.blue, 'place2')\nplace_relative(0, 1, 0, wools.green) -- equivalent to place_relative(0, 1, 0, wools.green, 'spawn')\nplace_relative(0, 1, 0) -- equivalent to place_relative(0, 1, 0, blocks.stone, 'spawn')\n```\n\n#### Shapes\n\nShapes are placed such that the drone position corresponds to the back-bottom-left of the shape (a cube will extend to the right-up-forward direction). `width` extends in the *right* direction, `height` extends in the *up* direction, `length` extends in the *forward* direction and `radius` extends in the remaining directions. `hollow` is `false` by default and the default `block` is stone.\n\n```lua\ncube(width, height, length, block, hollow)\nsphere(radius, block, hollow)\ndome(radius, block, hollow)\ncylinder(height, radius, block, hollow) -- short for vertical.cylinder\nvertical.cylinder(height, radius, block, hollow)\nhorizontal.cylinder(length, radius, block, hollow)\n```\n\n```lua\ncube(10, 10, 10, blocks.leaves) -- short for cube(10, 10, 10, blocks.leaves, false)\n```\n\n#### Centered shapes\n\nThese variants of the shapes are placed such that the drone position corresponds to the center of the shape. For the dome it corresponds to the bottom of the dome and its center for the other coordinates. `width` extends in the *left-right* direction, `height` extends in the *up-down* direction, `length` extends in the *forward-backward* direction and `radius` extends in the remaining directions.\n\n```lua\ncentered.cube(width, height, length, block, hollow)\ncentered.sphere(radius, block, hollow)\ncentered.dome(radius, block, hollow)\ncentered.cylinder(height, radius, block, hollow) -- short for centered.vertical.cylinder\ncentered.vertical.cylinder(height, radius, block, hollow)\ncentered.horizontal.cylinder(length, radius, block, hollow)\n```\n\n### Math \n\n```lua\nrandom([m [, n]])\nround(x, num)\nround0(x)   -- short for round(x, 0) (integer rounding)\nceil(x)\nfloor(x)\ndeg(x)\nrad(x)\nexp(x)\nlog(x)\nmax(x, ...)\nmin(x, ...)\nabs(x)\npow(x, y)\nsqrt(x)\nsin(x)\nasin(x)\nsinh(x)\ncos(x)\nacos(x)\ncosh(x)\ntan(x)\natan(x)\natan2(x, y)\ntanh(x)\npi\ne\n```\n\n#### Vectors\n\nSee documentation [here](https://github.com/ISs25u/vector3) (replacing `vector3` by `vector`).\n\nExample:\n```lua\nlocal u = vector(1, 2, 3)\nlocal v = vector(4, 5, 6)\nlocal w = (5 * u + u:dot(v) * u:cross(v:scale(5))):norm()\nlocal x, y, z = w:unpack()\n```\n\n### Misc \n\n```lua\nprint(message) -- print `message` in minetest chat\nerror(message) -- stops the program and prints `message`\nipairs(table)\npairs(table)\n```\n",
    "tags": [
        "education",
        "tools"
    ],
    "content_warnings": null,
    "license": "GPLv3",
    "media_license": "GPLv3",
    "repo": "https://github.com/ISs25u/codeblock",
    "website": null,
    "issue_tracker": "https://github.com/ISs25u/codeblock/issues",
    "forums": null
}